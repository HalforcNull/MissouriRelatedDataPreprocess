Y_tilde <- apply(B1%*%t(data-mu)+ B2%*%t(data-mu), 2, function(x) x+mu)
m <- t(Y-Y_tilde) %*% (Y-Y_tilde)
e <- Y-Y_tilde
m <- t(e) %*% (e)
data <- mvrnorm(n=1000, mu, Sigma)
eg <- eigen(Sigma)
eg$vectors
B1 <- eg$vectors[1,] %*% t(eg$vectors[1,])
B2 <- eg$vectors[2,] %*% t(eg$vectors[2,])
B3 <- eg$vectors[3,] %*% t(eg$vectors[3,])
B4 <- eg$vectors[4,] %*% t(eg$vectors[4,])
Y <-  apply(B1%*%t(data-mu)+ B2%*%t(data-mu)+ B3%*%t(data-mu)+ B4%*%t(data-mu), 2, function(x) x+mu)
Y_tilde <- apply(B1%*%t(data-mu)+ B2%*%t(data-mu), 2, function(x) x+mu)
e <- Y-Y_tilde
m <- t(e) %*% (e)
x <- data[,1]
x <- data[1,]
Y <- mu + B1%*%t(x-mu)+ B2%*%t(x-mu)+ B3%*%t(data-mu)+ B4%*%t(x-mu)
x-mu
m[,1]
m[1,]
mean(m[1,])
eg$values
mean(m)
mean(diag(m))
my.diag <- diag(m)
mean(my.diag)
eg <- eigen(Sigma)
eg$values
e <- Y-Y_tilde
e <- Y-Y_tilde
m <- t(e) %*% (e)
m
diag(m)
m <- e %*% e
m <- e * e
m
mean(m)
eg.values
eg.values
eg$values
eg <- eigen(Sigma)
eg$vectors
B1 <- eg$vectors[1,] %*% t(eg$vectors[1,])
B2 <- eg$vectors[2,] %*% t(eg$vectors[2,])
B3 <- eg$vectors[3,] %*% t(eg$vectors[3,])
B4 <- eg$vectors[4,] %*% t(eg$vectors[4,])
Y <-  apply(B1%*%t(data-mu)+ B2%*%t(data-mu)+ B3%*%t(data-mu)+ B4%*%t(data-mu), 2, function(x) x+mu)
Y_tilde <- apply(B1%*%t(data-mu)+ B2%*%t(data-mu), 2, function(x) x+mu)
e <- Y-Y_tilde
m <- e * e
calcY_YTilde <- function(x){
Y <- mu + B1%*%t(x-mu)+ B2%*%t(x-mu)+ B3%*%t(data-mu)+ B4%*%t(x-mu)
}
m
dim(m)
dim(e)
m <- t(e) %*% e
dim(m)
d <- diag(m)
d
dim(d)
length(d)
mean(d)
u <- c(eg$vectors[1], eg$vectors[2]) %*% (data-mu)
u <- t( c(eg$vectors[1], eg$vectors[2]) )%*% (data-mu)
dim(data-mu)
dim(data)
dim(mu)
t(data) - mu
u <- t( eg$vectors )%*% (t(data)-mu)
Y <-  apply(B1%*%( t(data) - mu)+ B2%*%( t(data) -mu)+ B3%*%( t(data) -mu)+ B4%*%( t(data)-mu), 2, function(x) x+mu)
Y_tilde <- apply(B1%*%( t(data) -mu)+ B2%*%( t(data) -mu), 2, function(x) x+mu)
e <- Y-Y_tilde
m <- t(e) %*% e
ans.is <- mean(diag(m))
ans.is
data - mu == t(data-mu)
data - mu == t(data) - mu
mu
u <- t( c(eg$vectors[1], eg$vectors[2]) )%*% t(data-mu)
dim(data)
u <- t( c(eg$vectors[1], eg$vectors[2]) )%*% (t(data)-mu)
eg$vectors
u <- t( t( c(eg$vectors[1], eg$vectors[2]) ))%*% t(t(data)-mu)
u <- t( t( c(eg$vectors[1], eg$vectors[2]) ))%*% (t(data)-mu)
u
s <- apply(e,2,FUN=function(x){t(x)%*%x})
mean(s)
princomp(data)
# dplyr complains this required libraries: libudunits2-dev, libmariadb-client-lgpl-dev
# install.packages("plotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
# sometimes need to remove all installed packages: https://www.r-bloggers.com/how-to-remove-all-user-installed-packages-in-r/
list.of.packages <- c(
"shiny", "shinyAce", "shinyBS", "plotly",
"RSQLite", "gplots",
"ggplot2", "dplyr", #"tidyverse",
"plotly",
"e1071", "reshape2", "DT",
"data.table", "Rcpp","WGCNA","flashClust","statmod","biclust","igraph","Rtsne"
)
list.of.bio.packages  <- c(
"limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea", "ReactomePA", "pathview", "PREDA",
"impute", "runibic","QUBIC","rhdf5",
"PREDAsampledata", "sfsmisc", "lokern", "multtest", "hgu133plus2.db",
"org.Ag.eg.db","org.At.tair.db","org.Bt.eg.db","org.Ce.eg.db","org.Cf.eg.db",
"org.Dm.eg.db","org.Dr.eg.db","org.EcK12.eg.db","org.EcSakai.eg.db","org.Gg.eg.db",
"org.Hs.eg.db","org.Hs.ipi.db","org.Mm.eg.db","org.Mmu.eg.db","org.Pf.plasmo.db",
"org.Pt.eg.db","org.Rn.eg.db","org.Sc.sgd.db","org.Sco.eg.db","org.Ss.eg.db",
"org.Tgondii.eg.db","org.Xl.eg.db"
)
if(0) { # remove all old packages, to solve problem caused by Bioconductor upgrade
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
}
#Install Require packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/", dependencies=TRUE)
new.bio.packages <- list.of.bio.packages[!(list.of.bio.packages %in% installed.packages()[,"Package"])]
if(length(new.bio.packages)){
source("https://bioconductor.org/biocLite.R")
biocLite(new.bio.packages, suppressUpdates = T)
}
#Load Packages
suc = unlist ( lapply(list.of.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.packages) )
cat ("\n\nWarnning!!!!!! These R packages cannot be loaded:", list.of.packages[!suc] )
suc = unlist ( lapply(list.of.bio.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.bio.packages) )
cat ("\n\nWarnning!!!!!! These Bioconductor packages cannot be loaded:", list.of.bio.packages[!suc] )
sessionInfo()
shiny::runApp('idep/shinyapps/idep')
# dplyr complains this required libraries: libudunits2-dev, libmariadb-client-lgpl-dev
# install.packages("plotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
# sometimes need to remove all installed packages: https://www.r-bloggers.com/how-to-remove-all-user-installed-packages-in-r/
list.of.packages <- c(
"shiny", "shinyAce", "shinyBS", "plotly",
"RSQLite", "gplots",
"ggplot2", "dplyr", #"tidyverse",
"plotly",
"e1071", "reshape2", "DT",
"data.table", "Rcpp","WGCNA","flashClust","statmod","biclust","igraph","Rtsne"
)
list.of.bio.packages  <- c(
"limma", "DESeq2", "edgeR", "gage", "PGSEA", "fgsea", "ReactomePA", "pathview", "PREDA",
"impute", "runibic","QUBIC","rhdf5",
"PREDAsampledata", "sfsmisc", "lokern", "multtest", "hgu133plus2.db",
"org.Ag.eg.db","org.At.tair.db","org.Bt.eg.db","org.Ce.eg.db","org.Cf.eg.db",
"org.Dm.eg.db","org.Dr.eg.db","org.EcK12.eg.db","org.EcSakai.eg.db","org.Gg.eg.db",
"org.Hs.eg.db","org.Hs.ipi.db","org.Mm.eg.db","org.Mmu.eg.db","org.Pf.plasmo.db",
"org.Pt.eg.db","org.Rn.eg.db","org.Sc.sgd.db","org.Sco.eg.db","org.Ss.eg.db",
"org.Tgondii.eg.db","org.Xl.eg.db"
)
if(0) { # remove all old packages, to solve problem caused by Bioconductor upgrade
# create a list of all installed packages
ip <- as.data.frame(installed.packages())
head(ip)
# if you use MRO, make sure that no packages in this library will be removed
ip <- subset(ip, !grepl("MRO", ip$LibPath))
# we don't want to remove base or recommended packages either\
ip <- ip[!(ip[,"Priority"] %in% c("base", "recommended")),]
# determine the library where the packages are installed
path.lib <- unique(ip$LibPath)
# create a vector with all the names of the packages you want to remove
pkgs.to.remove <- ip[,1]
head(pkgs.to.remove)
# remove the packages
sapply(pkgs.to.remove, remove.packages, lib = path.lib)
}
#Install Require packages
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.rstudio.com/", dependencies=TRUE)
new.bio.packages <- list.of.bio.packages[!(list.of.bio.packages %in% installed.packages()[,"Package"])]
if(length(new.bio.packages)){
source("https://bioconductor.org/biocLite.R")
biocLite(new.bio.packages, suppressUpdates = T)
}
#Load Packages
suc = unlist ( lapply(list.of.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.packages) )
cat ("\n\nWarnning!!!!!! These R packages cannot be loaded:", list.of.packages[!suc] )
suc = unlist ( lapply(list.of.bio.packages, require, character.only = TRUE) )
if(sum(suc) < length(list.of.bio.packages) )
cat ("\n\nWarnning!!!!!! These Bioconductor packages cannot be loaded:", list.of.bio.packages[!suc] )
shiny::runApp('idep/shinyapps/idep')
packageVersion('digest')
install.packages('digest')
load("C:/GitRepo/SanfordProfile/export_userinfo_weightmeasure_activity_homestore_MealPlan.rds")
readRDS("C:/GitRepo/SanfordProfile/export_userinfo_weightmeasure_activity_homestore_MealPlan.rds")
sanfordData <- readRDS("C:/GitRepo/SanfordProfile/export_userinfo_weightmeasure_activity_homestore_MealPlan.rds")
sanfordData$age <- sanfordData$age * -1
head(sanfordData$age)
saveRDS(sanfordData, file="C:/GitRepo/SanfordProfile/export_userinfo_weightmeasure_activity_homestore_MealPlan2.rds")
install.packages("xml")
install.packages("XML")
library(XML)
source("https://bioconductor.org/biocLite.R")
biocLite()
biocLite(pkgs = c("limma"), quiet=TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite(pkgs = c("limma"), quiet=TRUE)
deviceNames <- NULL
for(i in 1:28){
deviceNames <- c( deviceNames, paste('device_weight_mean_', i, sep = "" ))
}
deviceNames
devtools::install_github("rstudio/keras")
devtools::install_github("rstudio/keras")
install.packages(c('reticulate', 'tfruns'))
install.packages(c("reticulate", "tfruns"))
devtools::install_github("rstudio/keras")
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
setwd("C:/GitRepo/MissouriRelatedDataPreprocess")
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.fpkm <- read.table("Missouri Data Result/genes.fpkm_table", header = TRUE)
View(gene.fpkm)
View(gene.attr)
s <- read.table("Missouri Data Result/cds.attr_table", header = TRUE)
View(s)
write.csv(PC3M, file="pc3m.csv", row.names = FALSE)
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
library(dplyr)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
rawresult <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
PC3M<-rawresult %>%
select(one_of(c('gene_short_name', 'q7_0', 'q8_0', 'q9_0', 'q10_0', 'q11_0', 'q12_0') ))
colnames(PC3M) <- c('gene_short_name', 'PC3MNT1', 'PC3MNT2', 'PC3MNT3', 'PC3MTR1', 'PC3MTR2', 'PC3MTR3')
write.csv(PC3M, file="pc3m.csv", row.names = FALSE)
write.csv(PC3M, file="pc3m.csv", row.names = FALSE)
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(dplyr)
biocLite("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
View(hgnc_swissprot)
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
library(dplyr)
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
library(dplyr)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
library(dplyr)
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
.libPaths()
.libPaths(.libPaths()[2])
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(dplyr)
install.packages("dplyr")
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
library(biomaRt)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
library(dplyr)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot)
names(rawresult_1)[1] <- 'hgnc_symbol'
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot)
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot, by = 'hgnc_symbol')
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
names(rawresult_1)[26] <- 'hgnc_symbol'
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot, by = 'hgnc_symbol')
PC3M<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q7_0', 'q8_0', 'q9_0', 'q10_0', 'q11_0', 'q12_0') ))
colnames(PC3M) <- c('ensembl_gene_id', 'PC3MNT1', 'PC3MNT2', 'PC3MNT3', 'PC3MTR1', 'PC3MTR2', 'PC3MTR3')
write.csv(PC3M, file="pc3m.csv", row.names = FALSE)
PC3<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q13_0', 'q14_0', 'q15_0', 'q16_0', 'q17_0', 'q18_0') ))
colnames(PC3) <- c('ensembl_gene_id', 'PC3_NT1', 'PC3_NT2', 'PC3_NT3', 'PC3_TR1', 'PC3_TR2', 'PC3_TR3')
write.csv(PC3, file="pc3.csv", row.names = FALSE)
gene.count <- read.table("Yale Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Yale Data Result/genes.attr_table", header = TRUE)
View(gene.attr)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
names(rawresult_1)[26] <- 'hgnc_symbol'
names(rawresult_1)[8] <- 'hgnc_symbol'
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot, by = 'hgnc_symbol')
PC3M<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q1_0', 'q2_0', 'q3_0', 'q4_0', 'q5_0', 'q6_0') ))
MCF7<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q1_0', 'q2_0', 'q3_0', 'q4_0', 'q5_0', 'q6_0') ))
colnames(MCF7) <- c('ensembl_gene_id', 'MCF7_NT1', 'MCF7_NT2', 'MCF7_NT3', 'MCF7_TR1', 'MCF7_TR2', 'MCF7_TR3')
write.csv(MCF7, file="MCF7.csv", row.names = FALSE)
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
source("https://bioconductor.org/biocLite.R")
biocLite("biomaRt")
library(biomaRt)
library(dplyr)
ensembl = useEnsembl(biomart="ensembl", dataset="hsapiens_gene_ensembl", GRCh=37)
hgnc_swissprot <- getBM(attributes=c('ensembl_gene_id','hgnc_symbol'), mart = ensembl)
gene.count <- read.table("Missouri Data Result/genes.count_table", header = TRUE)
gene.attr <- read.table("Missouri Data Result/genes.attr_table", header = TRUE)
gene.tracking.name <- gene.attr %>% select(one_of(c("tracking_id", "gene_short_name")))
rawresult_1 <- dplyr::left_join(gene.count, gene.tracking.name, by="tracking_id")
names(rawresult_1)[26] <- 'hgnc_symbol'
rawresult<- dplyr::inner_join(rawresult_1, hgnc_swissprot, by = 'hgnc_symbol')
PC3M<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q7_0', 'q8_0', 'q9_0', 'q10_0', 'q11_0', 'q12_0') ))
colnames(PC3M) <- c('ensembl_gene_id', 'PC3M_NT1', 'PC3M_NT2', 'PC3M_NT3', 'PC3M_TR1', 'PC3M_TR2', 'PC3M_TR3')
PC3<-rawresult %>%
select(one_of(c('ensembl_gene_id', 'q13_0', 'q14_0', 'q15_0', 'q16_0', 'q17_0', 'q18_0') ))
colnames(PC3) <- c('ensembl_gene_id', 'PC3_NT1', 'PC3_NT2', 'PC3_NT3', 'PC3_TR1', 'PC3_TR2', 'PC3_TR3')
write.csv(PC3M, file="pc3m.csv", row.names = FALSE)
write.csv(PC3, file="pc3.csv", row.names = FALSE)
# kallisto solution
PC3NT1 <- read.table("VerifyPC3/kallistoResult2_NT1/genes.count_table", header = TRUE)
setwd("C:/GitRepo/MissouriRelatedDataPreprocess")
# kallisto solution
PC3NT1 <- read.table("VerifyPC3/kallistoResult2_NT1/genes.count_table", header = TRUE)
PC3NT1 <- read.table("VerifyPC3/kallistoResult2_NT1/abundance.tsv", header = TRUE)
PC3NT2 <- read.table("VerifyPC3/kallistoResult2_NT2/abundance.tsv", header = TRUE)
PC3NT3 <- read.table("VerifyPC3/kallistoResult2_NT3/abundance.tsv", header = TRUE)
PC3TR1 <- read.table("VerifyPC3/kallistoResult2_TR1/abundance.tsv", header = TRUE)
PC3TR2 <- read.table("VerifyPC3/kallistoResult2_TR2/abundance.tsv", header = TRUE)
PC3TR3 <- read.table("VerifyPC3/kallistoResult2_TR3/abundance.tsv", header = TRUE)
PC3TR3 <- read.table("VerifyPC3/kallistoResult2_TR3/abundance.tsv", header = TRUE)
View(PC3NT1)
summary(PC3TR3$tpm)
summary(PC3TR3$est_counts)
summary(PC3$PC3_TR3)
PC3NT1 <- PC3NT1 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3NT1)[2] <- 'PC3NT1'
PC3NT2 <- PC3NT2 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3NT2)[2] <- 'PC3NT2'
PC3NT3 <- PC3NT3 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3NT3)[2] <- 'PC3NT3'
PC3TR1 <- PC3TR1 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3TR1)[2] <- 'PC3TR1'
PC3TR2 <- PC3TR2 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3TR2)[2] <- 'PC3TR2'
PC3TR3 <- PC3TR3 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(PC3TR3)[2] <- 'PC3TR3'
PC3Result <- full_join(
full_join(  full_join(PC3NT1,PC3NT2, by='tpm'),
full_join(PC3NT3,PC3TR1, by='tpm'), by='tpm'
),
full_join(  PC3TR2, PC3TR3, by='tpm' ),
by='tpm')
PC3Result <- full_join(
full_join(  full_join(PC3NT1,PC3NT2, by='target_id'),
full_join(PC3NT3,PC3TR1, by='target_id'),
by='target_id'
),
full_join(  PC3TR2, PC3TR3, by='target_id' ),
by='target_id')
write.csv(PC3Result, file="PC3Verify.csv", row.names = FALSE)
View(PC3Result)
sapply(strsplit(PC3Result$target_id, '.'), "[", 1)
lapply(strsplit(PC3Result$target_id, '.'), "[", 1)
k <- PC3Result$target_id
sapply(strsplit(k, '.'), "[", 1)
k <- k[1:50]
k <- as.character( PC3Result$target_id )
sapply(strsplit(k, '.'), "[", 1)
strsplit("ENST000000521321", '.')
strsplit("ENST000000521321.1", '.')
strsplit("ENST000000521321", '.')[1]
strsplit("ENST000000521321.1", '.')[1]
sub("\.*", "", "ENST000000521321.1")
sub(".*", "", "ENST000000521321.1")
sub("..*", "", "ENST000000521321.1")
sub("[:punct:].*", "", "ENST000000521321.1")
sub("[.].*", "", "ENST000000521321.1")
k <- PC3Result
k$target_id <- sub("[.].*", "", as.character( k$target_id) )
View(k)
PC3Result$target_id <- sub("[.].*", "", as.character( PC3Result$target_id) )
write.csv(PC3Result, file="PC3Verify.csv", row.names = FALSE)
View(PC3Result)
length(unique(PC3Result$target_id))
MCF7Result <- full_join(
full_join(  full_join(MCF7NT1,MCF7NT2, by='target_id'),
full_join(MCF7NT3,MCF7TR1, by='target_id'),
by='target_id'
),
full_join(  MCF7TR2, MCF7TR3, by='target_id' ),
by='target_id')
MCF7NT1 <- read.table("VerifyMCF7/kallistoResult_NT1/abundance.tsv", header = TRUE)
MCF7NT2 <- read.table("VerifyMCF7/kallistoResult_NT2/abundance.tsv", header = TRUE)
MCF7NT3 <- read.table("VerifyMCF7/kallistoResult_NT3/abundance.tsv", header = TRUE)
MCF7TR1 <- read.table("VerifyMCF7/kallistoResult_TR1/abundance.tsv", header = TRUE)
MCF7TR2 <- read.table("VerifyMCF7/kallistoResult_TR2/abundance.tsv", header = TRUE)
MCF7TR3 <- read.table("VerifyMCF7/kallistoResult_TR3/abundance.tsv", header = TRUE)
MCF7NT1 <- MCF7NT1 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7NT1)[2] <- 'MCF7NT1'
MCF7NT2 <- MCF7NT2 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7NT2)[2] <- 'MCF7NT2'
MCF7NT3 <- MCF7NT3 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7NT3)[2] <- 'MCF7NT3'
MCF7TR1 <- MCF7TR1 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7TR1)[2] <- 'MCF7TR1'
MCF7TR2 <- MCF7TR2 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7TR2)[2] <- 'MCF7TR2'
MCF7TR3 <- MCF7TR3 %>%
select(one_of('target_id', 'tpm'))  ## NOTE: we are using transcript per million (TPM) here.
names(MCF7TR3)[2] <- 'MCF7TR3'
MCF7Result <- full_join(
full_join(  full_join(MCF7NT1,MCF7NT2, by='target_id'),
full_join(MCF7NT3,MCF7TR1, by='target_id'),
by='target_id'
),
full_join(  MCF7TR2, MCF7TR3, by='target_id' ),
by='target_id')
MCF7Result$target_id <- sub("[.].*", "", as.character( MCF7Result$target_id) )
write.csv(MCF7Result, file="MCF7Verify.csv", row.names = FALSE)
install.packages('DESeq2')
library('DESeq2')
source("https://bioconductor.org/biocLite.R")
biocLite("DESeq2")
library('DESeq2')
library('DESeq2')
biocLite("DESeq2")
shiny::runApp('Import Kallisto Data/ImportKallistoTest')
runApp('Import Kallisto Data/ImportKallistoTest')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
runApp('cuffnormDataPreprocess')
files <-c(
'VerifyPC3/kallistoResult2_NT1/abundance.tsv',
'VerifyPC3/kallistoResult2_NT2/abundance.tsv',
'VerifyPC3/kallistoResult2_NT3/abundance.tsv',
'VerifyPC3/kallistoResult2_TR1/abundance.tsv',
'VerifyPC3/kallistoResult2_TR2/abundance.tsv',
'VerifyPC3/kallistoResult2_TR3/abundance.tsv')
names(files) <- c('PC3NT1','PC3NT2','PC3NT3','PC3TR1','PC3TR2','PC3TR3')
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE, ignoreTxVersion=TRUE )
write.csv(txi.kallisto.tsv$counts, file="PC3Verify_2.csv", row.names = TRUE)
library(EnsDb.Hsapiens.v86)
library(AnnotationDbi)
esdb <- EnsDb.Hsapiens.v86
newtxs <- transcripts(esdb, return.type = 'data.frame')
k <- keys(esdb, keytype = "TXNAME")
tx2gene <- dplyr::select(newtxs, one_of(c('tx_name', 'gene_id')))
colnames(tx2gene) <- c('TXNAME', 'GENEID')
library(dplyr)
tx2gene <- dplyr::select(newtxs, one_of(c('tx_name', 'gene_id')))
colnames(tx2gene) <- c('TXNAME', 'GENEID')
files <-c(
'VerifyPC3/kallistoResult2_NT1/abundance.tsv',
'VerifyPC3/kallistoResult2_NT2/abundance.tsv',
'VerifyPC3/kallistoResult2_NT3/abundance.tsv',
'VerifyPC3/kallistoResult2_TR1/abundance.tsv',
'VerifyPC3/kallistoResult2_TR2/abundance.tsv',
'VerifyPC3/kallistoResult2_TR3/abundance.tsv')
names(files) <- c('PC3NT1','PC3NT2','PC3NT3','PC3TR1','PC3TR2','PC3TR3')
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE, ignoreTxVersion=TRUE )
write.csv(txi.kallisto.tsv$counts, file="PC3Verify_2.csv", row.names = TRUE)
source("https://bioconductor.org/biocLite.R")
biocLite("tximport")
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE, ignoreTxVersion=TRUE )
write.csv(txi.kallisto.tsv$counts, file="PC3Verify_2.csv", row.names = TRUE)
txi.kallisto.tsv <- tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE, ignoreTxVersion=TRUE )
txi.kallisto.tsv <- tximport::tximport(files, type = "kallisto", tx2gene = tx2gene, ignoreAfterBar = TRUE, ignoreTxVersion=TRUE )
write.csv(txi.kallisto.tsv$counts, file="PC3Verify_2.csv", row.names = TRUE)
